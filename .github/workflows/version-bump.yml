name: Version Bump PR

on:
  push:
    branches:
      - main
      - PAT-256--Teams-API-Initiative-Versioning-of-Teams-API-GEM  # REMOVE this line after testing
    paths-ignore:
      - 'lib/teams_api/version.rb'

jobs:
  create-version-pr:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip-version]')"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.VERSION_PAT }}

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true

      - name: Configure Git
        run: |
          git config user.name "Manuel Crosthwaite"
          git config user.email "mcrosthwaite@blueskyelearn.com"

      - name: Determine Version Bump Type
        id: bump-type
        run: |
          if [[ "${{ github.event.head_commit.message }}" =~ \[major\] ]]; then
            echo "BUMP_TYPE=major" >> $GITHUB_ENV
          elif [[ "${{ github.event.head_commit.message }}" =~ \[minor\] ]]; then
            echo "BUMP_TYPE=minor" >> $GITHUB_ENV
          else
            echo "BUMP_TYPE=patch" >> $GITHUB_ENV
          fi

      # Get the current branch
      - name: Set Target Branch
        run: |
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "Target branch: $CURRENT_BRANCH"
          echo "CURRENT_BRANCH=$CURRENT_BRANCH" >> $GITHUB_ENV

      - name: Process Version Change
        run: |
          # Debug: Show git status
          git status
          
          # Get current version with robust pattern matching
          version_file="lib/teams_api/version.rb"
          file_content=$(cat "$version_file")
          echo "Version file content:"
          echo "$file_content"
          
          # Extract version using regex
          if [[ $file_content =~ VERSION[[:space:]]*=[[:space:]]*[\'\"](([0-9]+)\.([0-9]+)\.([0-9]+))[\'\"] ]]; then
            current_version="${BASH_REMATCH[1]}"
            major="${BASH_REMATCH[2]}"
            minor="${BASH_REMATCH[3]}"
            patch="${BASH_REMATCH[4]}"
            
            echo "Current version: $current_version (Major: $major, Minor: $minor, Patch: $patch)"
            
            # Increment version based on bump type
            if [[ "$BUMP_TYPE" == "major" ]]; then
              major=$((major + 1))
              minor=0
              patch=0
              echo "Bumping MAJOR version"
            elif [[ "$BUMP_TYPE" == "minor" ]]; then
              minor=$((minor + 1))
              patch=0
              echo "Bumping MINOR version"
            else
              patch=$((patch + 1))
              echo "Bumping PATCH version"
            fi
            
            new_version="$major.$minor.$patch"
            echo "New version: $new_version"
            
            if [ "$current_version" == "$new_version" ]; then
              echo "Error: New version is the same as current version. Nothing to update."
              exit 1
            fi
            
            echo "NEW_VERSION=$new_version" >> $GITHUB_ENV
            
            # Create branch with unique name
            timestamp=$(date +%s)
            branch_name="version-bump-$new_version-$timestamp"
            echo "BRANCH_NAME=$branch_name" >> $GITHUB_ENV
            
            git checkout -b "$branch_name"
            
            # Replace version in file - handle both single and double quotes
            if [[ $file_content =~ VERSION[[:space:]]*=[[:space:]]*[\'\"] ]]; then
              quote_char="${BASH_REMATCH[0]: -1}"
              echo "Found version with quote character: $quote_char"
              
              # Replace version with sed, preserving the quote style
              sed -i "s/VERSION[[:space:]]*=[[:space:]]*$quote_char$current_version$quote_char/VERSION = $quote_char$new_version$quote_char/" "$version_file"
              
              # Verify change
              new_content=$(cat "$version_file")
              echo "Updated version file content:"
              echo "$new_content"
              
              if ! grep -q "$new_version" "$version_file"; then
                echo "ERROR: Version update failed. New version not found in file."
                exit 1
              fi
              
              # Stage and commit changes
              git add "$version_file"
              git diff --cached
              
              git commit -m "Bump version to $new_version [skip-version]"
              git push origin "$branch_name"
              
              echo "Successfully created and pushed branch $branch_name with version $new_version"
            else
              echo "Error: Could not determine quote style for version replacement"
              exit 1
            fi
          else
            echo "Error: Could not extract version using regex"
            exit 1
          fi

      # Create PR using GitHub CLI instead of the peter-evans action
      - name: Create Pull Request with GitHub CLI
        run: |
          # Install GitHub CLI
          type -p curl >/dev/null || (apt-get update && apt-get install -y curl)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          apt-get update && apt-get install -y gh
          
          # Create PR
          PR_URL=$(gh pr create --title "Bump version to ${{ env.NEW_VERSION }}" \
            --body "Automated version bump from ${{ github.workflow }}\n\nVersion bump type: ${{ env.BUMP_TYPE }}\nNew version: ${{ env.NEW_VERSION }}\n\nThis PR will be automatically merged when approved." \
            --base "${{ env.CURRENT_BRANCH }}" \
            --head "${{ env.BRANCH_NAME }}" \
            --label "automated,version")
          
          if [[ ! -z "$PR_URL" ]]; then
            echo "Created PR: $PR_URL"
            PR_NUMBER=$(echo $PR_URL | awk -F/ '{print $NF}')
            echo "PR number: $PR_NUMBER"
            
            # Enable auto-merge
            gh pr merge "$PR_NUMBER" --auto --squash
            echo "Enabled auto-merge for PR #$PR_NUMBER"
          else
            echo "Failed to create PR"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.VERSION_PAT }}
          